/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package MySQL;

import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Reakkidingg_
 */
public class showEmployees extends javax.swing.JDialog {

    /**
     * Creates new form showEmployees
     */
    public showEmployees(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        table.getSelectionModel().addListSelectionListener((e) -> {
            tableSelectionChanged(e);
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        picture = new controls.JPictureBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        searchEmp = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Picture", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.setLayout(new java.awt.BorderLayout());

        picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MySQL/1.jpg"))); // NOI18N
        picture.setImageMode(controls.JPictureBox.mode.Zoom);

        javax.swing.GroupLayout pictureLayout = new javax.swing.GroupLayout(picture);
        picture.setLayout(pictureLayout);
        pictureLayout.setHorizontalGroup(
            pictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 209, Short.MAX_VALUE)
        );
        pictureLayout.setVerticalGroup(
            pictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 199, Short.MAX_VALUE)
        );

        jPanel1.add(picture, java.awt.BorderLayout.CENTER);

        table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Firstname", "Lastname", "Gender", "DateOfBirth", "Salary", "Phone Number", "Email", "Address"
            }
        ));
        jScrollPane1.setViewportView(table);

        searchEmp.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        searchEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEmpActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel1.setText("Search Employee:");

        btnSearch.setIcon(new javax.swing.ImageIcon("D:\\SUBJECTS OF SETEC_Y2_S2\\Year3 Semester l\\JAVA l\\P-01\\JavaApplication1\\imgs\\icons8-search-32.png")); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1206, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(514, 514, 514)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchEmp)
                            .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 private List<Employee> employees;

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            employees = Employee.getAll();
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            for (Employee em : employees) {
                model.addRow(em.getRow());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_formWindowOpened

    // For Search Model
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
//         TODO add your handling code here:
        String searchText = searchEmp.getText().trim().toLowerCase(); // Convert search text to lowercase and trim whitespace
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0); // Clear the table before populating with search results

    try {
        List<Employee> searchResults = new ArrayList<>();
        for (Employee emp : employees) {
            String fullName = emp.getFirstName().trim() + " " + emp.getLastName().trim(); // Concatenate trimmed first name and last name
            fullName = fullName.toLowerCase(); // Convert full name to lowercase
            if (String.valueOf(emp.getId()).contains(searchText)
                    || fullName.contains(searchText)) {
                searchResults.add(emp);
            }
        }

        for (Employee emp : searchResults) {
            model.addRow(emp.getRow());
        }

        if (searchResults.isEmpty()) { // Display message if no matches are found
            JOptionPane.showMessageDialog(this, "No matching employees found.");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, e.getMessage());
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void searchEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEmpActionPerformed
        // TODO add your handling code here:
        String searchText = searchEmp.getText().trim().toLowerCase();
DefaultTableModel model = (DefaultTableModel) table.getModel();
model.setRowCount(0); // Clear the table before populating with search results

boolean found = false; // Flag to track if any matches are found

try {
    for (Employee emp : employees) {
        String fullName = emp.getFirstName().toLowerCase() + " " + emp.getLastName().toLowerCase(); 
        if (String.valueOf(emp.getId()).contains(searchText)
                || fullName.contains(searchText)) {
            model.addRow(emp.getRow());
            found = true; // Set the flag to true if at least one match is found
        }
    }

    if (!found) { // Display message if no matches are found
        JOptionPane.showMessageDialog(this, "No matching employees found.");
    }
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, e.getMessage());
}


    //Automatically Search
    
        searchEmp.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search();
            }

            private void search() {
                String searchText = searchEmp.getText().trim().toLowerCase();
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.setRowCount(0); // Clear the table before populating with search results

                try {
                    for (Employee emp : employees) {
                        String fullName = emp.getFirstName().trim() + " " + emp.getLastName().trim();
                        fullName = fullName.toLowerCase();
                        if (String.valueOf(emp.getId()).contains(searchText)
                                || fullName.contains(searchText)) {
                            model.addRow(emp.getRow());
                        }
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(showEmployees.this, ex.getMessage());
                }
            }
        });

    }//GEN-LAST:event_searchEmpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(showEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(showEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(showEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(showEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                showEmployees dialog = new showEmployees(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private controls.JPictureBox picture;
    public javax.swing.JTextField searchEmp;
    public javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    //Selected Image By ID
    private void tableSelectionChanged(ListSelectionEvent e) {
    if (!table.getSelectionModel().isSelectionEmpty()) {
        int idColumnIndex = 0; // Assuming the employee ID is in the first column of the table
        int selectedRowIndex = table.getSelectedRow();
        int id = Integer.parseInt(table.getValueAt(selectedRowIndex, idColumnIndex).toString());

        // Find the employee with the corresponding ID
        Employee selectedEmployee = null;
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                selectedEmployee = emp;
                break;
            }
        }

        if (selectedEmployee != null) {
            Icon photo = new ImageIcon(selectedEmployee.getPhoto());
            picture.setIcon(photo);
        }
    }
    else{
        picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MySQL/1.jpg")));
    }
}
}
